- description: whole-program pointer analysis
  analysisClass: pascal.taie.analysis.pta.PointerAnalysis
  id: pta
  options:
    solver: default # | simple
    cs: ci # | k-[obj/type/call]
    implicit-entries: true # analyze implicit entries
    only-app: false # only analyze application code
    merge-string-constants: false
    merge-string-objects: true
    merge-string-builders: true
    merge-exception-objects: true
    action: null # | dump | compare
    file: null # path to input/output file
    reflection-log: null # path to reflection log
    taint-config: null # path to config file of taint analysis, when this file
    # is given, taint analysis will be enabled

- description: a functional context-insensitive pointer analysis, only for education purpose
  analysisClass: pascal.taie.analysis.pta.ci.CIPTA
  id: cipta
  options:
    merge-string-constants: false
    merge-string-objects: false
    merge-string-builders: false
    merge-exception-objects: true
    only-app: false # only analyze application code
    action: null # | dump | compare
    file: null # path to input/output file

- description: call graph construction
  analysisClass: pascal.taie.analysis.graph.callgraph.CallGraphBuilder
  id: cg
  requires: [ pta(algorithm=pta),cipta(algorithm=cipta) ]
  options:
    algorithm: pta # | cha | cipta
    action: null # | dump | dump-recall | compare
    file: null # path to input/output files

- description: throw analysis
  analysisClass: pascal.taie.analysis.exception.ThrowAnalysis
  id: throw
  requires: [ pta(algorithm=pta) ] # only required by pta-based analysis
  options:
    exception: explicit # | all (includes implicit and explicit exceptions)
    algorithm: intra # | pta

- description: intraprocedural control-flow graph
  analysisClass: pascal.taie.analysis.graph.cfg.CFGBuilder
  id: cfg
  requires: [ throw(exception=explicit|all) ]
  options:
    exception: explicit # | none | all (includes implicit and explicit exceptions)
    dump: false # dump control-flow graph

- description: interprocedural control-flow graph
  analysisClass: pascal.taie.analysis.graph.icfg.ICFGBuilder
  id: icfg
  requires: [ cfg,cg ]
  options:
    dump: false # dump inter-procedural control-flow graph

- description: live variable analysis
  analysisClass: pascal.taie.analysis.dataflow.analysis.LiveVariableAnalysis
  id: livevar
  requires: [ cfg ]
  options:
    strongly: false # enable strongly live variable analysis

- description: available expression analysis
  analysisClass: pascal.taie.analysis.dataflow.analysis.availexp.AvailableExpressionAnalysis
  id: availexp
  requires: [ cfg ]

- description: reaching definition analysis
  analysisClass: pascal.taie.analysis.dataflow.analysis.ReachingDefinitionAnalysis
  id: reachdef
  requires: [ cfg ]

- description: constant propagation
  analysisClass: pascal.taie.analysis.dataflow.analysis.constprop.ConstantPropagation
  id: constprop
  requires: [ cfg ]
  options:
    edge-transfer: true

- description: inter-procedural constant propagation
  analysisClass: pascal.taie.analysis.dataflow.inter.InterConstantPropagation
  id: inter-constprop
  requires: [ icfg,cipta(pta=cipta),pta(pta=pta) ]
  options:
    alias-aware: false
    pta: null

- description: dead code detection
  analysisClass: pascal.taie.analysis.dataflow.analysis.DeadCodeDetection
  id: deadcode
  requires: [ cfg,constprop,livevar ]

- description: process results of previously-run analyses
  analysisClass: pascal.taie.analysis.dataflow.analysis.ResultProcessor
  id: process-result
  options:
    analyses: [ ]
    action: dump # | compare
    file: null
    log-mismatches: false # | whether log mismatched items

- description: dump classes
  analysisClass: pascal.taie.analysis.misc.ClassDumper
  id: class-dumper
