- description: whole-program pointer analysis
  analysisClass: pascal.taie.analysis.pta.PointerAnalysis
  id: pta
  options:
    cs: ci
    implicit-entries: true # analyze implicit entries
    only-app: false # only analyze application code
    merge-string-constants: false
    merge-string-objects: true
    merge-string-builders: true
    merge-exception-objects: true
    action: null # | dump | compare
    file: null # path to input/output file
    reflection-log: null
    taint: false # whether enable taint analysis or not
    taint.sources-sinks: null # path to config file that specifies
                            # sources and sinks for taint analysis

- description: context-insensitive pointer analysis
  analysisClass: pascal.taie.analysis.pta.ci.CIPTA
  id: cipta
  options:
    merge-string-constants: false
    merge-string-objects: false
    merge-string-builders: false
    merge-exception-objects: true
    only-app: false # only analyze application code
    action: null # | dump | compare
    file: null # path to input/output file

- description: call graph construction
  analysisClass: pascal.taie.analysis.graph.callgraph.CallGraphBuilder
  id: cg
  requires: [pta(algorithm=pta),cipta(algorithm=cipta)]
  options:
    algorithm: pta # | cipta | cha
    action: null # | dump | dump-recall | compare
    file: null # path to input/output files

- description: throw analysis
  analysisClass: pascal.taie.analysis.exception.ThrowAnalysis
  id: throw
  requires: [pta(algorithm=pta)] # only required by pta-based analysis
  options:
    exception: explicit # | all (includes implicit and explicit exceptions)
    algorithm: intra # | pta

- description: intraprocedural control-flow graph
  analysisClass: pascal.taie.analysis.graph.cfg.CFGBuilder
  id: cfg
  requires: [throw(exception=explicit|all)]
  options:
    exception: explicit # | none | all (includes implicit and explicit exceptions)
    dump: false # dump control-flow graph

- description: interprocedural control-flow graph
  analysisClass: pascal.taie.analysis.graph.icfg.ICFGBuilder
  id: icfg
  requires: [cfg,cg]
  options:
    dump: false # dump inter-procedural control-flow graph

- description: live variable analysis
  analysisClass: pascal.taie.analysis.dataflow.analysis.LiveVariableAnalysis
  id: livevar
  requires: [cfg]

- description: available expression analysis
  analysisClass: pascal.taie.analysis.dataflow.analysis.availexp.AvailableExpressionAnalysis
  id: availexp
  requires: [cfg]

- description: reaching definition analysis
  analysisClass: pascal.taie.analysis.dataflow.analysis.ReachingDefinitionAnalysis
  id: reachdef
  requires: [cfg]

- description: constant propagation
  analysisClass: pascal.taie.analysis.dataflow.analysis.constprop.ConstantPropagation
  id: constprop
  requires: [cfg]

- description: inter-procedural constant propagation
  analysisClass: pascal.taie.analysis.dataflow.ipa.IPConstantPropagation
  id: ip-constprop
  requires: [icfg]

- description: dead code detection
  analysisClass: pascal.taie.analysis.dataflow.analysis.DeadCodeDetection
  id: deadcode
  requires: [cfg,constprop,livevar]

- description: process results of previously-run analyses
  analysisClass: pascal.taie.analysis.dataflow.analysis.ResultProcessor
  id: process-result
  options:
    analyses: []
    action: dump # | compare
    file: null
