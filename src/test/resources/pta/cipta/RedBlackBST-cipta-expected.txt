Points-to sets of all variables
<Node: void <init>(int,java.lang.Object,boolean,int)>/%this -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<Node: void <init>(int,java.lang.Object,boolean,int)>/color -> []
<Node: void <init>(int,java.lang.Object,boolean,int)>/key -> []
<Node: void <init>(int,java.lang.Object,boolean,int)>/size -> []
<Node: void <init>(int,java.lang.Object,boolean,int)>/val -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: Node balance(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node balance(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$1 -> []
<RedBlackBST: Node balance(Node)>/temp$10 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$11 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$12 -> []
<RedBlackBST: Node balance(Node)>/temp$13 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$14 -> []
<RedBlackBST: Node balance(Node)>/temp$15 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$16 -> []
<RedBlackBST: Node balance(Node)>/temp$18 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$19 -> []
<RedBlackBST: Node balance(Node)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$21 -> []
<RedBlackBST: Node balance(Node)>/temp$3 -> []
<RedBlackBST: Node balance(Node)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$5 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$6 -> []
<RedBlackBST: Node balance(Node)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$8 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node balance(Node)>/temp$9 -> []
<RedBlackBST: Node delete(Node,int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node delete(Node,int)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/key -> []
<RedBlackBST: Node delete(Node,int)>/temp$0 -> []
<RedBlackBST: Node delete(Node,int)>/temp$10 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$11 -> []
<RedBlackBST: Node delete(Node,int)>/temp$12 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$13 -> []
<RedBlackBST: Node delete(Node,int)>/temp$15 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$16 -> []
<RedBlackBST: Node delete(Node,int)>/temp$17 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$18 -> []
<RedBlackBST: Node delete(Node,int)>/temp$19 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$20 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$21 -> []
<RedBlackBST: Node delete(Node,int)>/temp$22 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$23 -> []
<RedBlackBST: Node delete(Node,int)>/temp$25 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$26 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$27 -> []
<RedBlackBST: Node delete(Node,int)>/temp$28 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: Node delete(Node,int)>/temp$29 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$3 -> []
<RedBlackBST: Node delete(Node,int)>/temp$30 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$31 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$32 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$33 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$5 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$6 -> []
<RedBlackBST: Node delete(Node,int)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$8 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node delete(Node,int)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node deleteMin(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$1 -> []
<RedBlackBST: Node deleteMin(Node)>/temp$10 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$3 -> []
<RedBlackBST: Node deleteMin(Node)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$5 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$6 -> []
<RedBlackBST: Node deleteMin(Node)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$8 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node deleteMin(Node)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node min(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node min(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node min(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node min(Node)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node min(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedLeft(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node moveRedLeft(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedLeft(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedLeft(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedLeft(Node)>/temp$2 -> []
<RedBlackBST: Node moveRedLeft(Node)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedLeft(Node)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedLeft(Node)>/temp$5 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedRight(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node moveRedRight(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedRight(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedRight(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node moveRedRight(Node)>/temp$2 -> []
<RedBlackBST: Node moveRedRight(Node)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/%intconst0 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/key -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$1 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$10 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$11 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$12 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$13 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$14 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$15 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$16 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$17 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$18 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$19 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$20 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$21 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$22 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$23 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$25 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$26 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$28 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$5 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$6 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$8 -> []
<RedBlackBST: Node put(Node,int,java.lang.Object)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node put(Node,int,java.lang.Object)>/val -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: Node rotateLeft(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node rotateLeft(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateLeft(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateLeft(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateLeft(Node)>/temp$10 -> []
<RedBlackBST: Node rotateLeft(Node)>/temp$12 -> []
<RedBlackBST: Node rotateLeft(Node)>/temp$2 -> []
<RedBlackBST: Node rotateLeft(Node)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateLeft(Node)>/temp$4 -> []
<RedBlackBST: Node rotateLeft(Node)>/temp$5 -> []
<RedBlackBST: Node rotateLeft(Node)>/temp$6 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateLeft(Node)>/temp$7 -> []
<RedBlackBST: Node rotateLeft(Node)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateLeft(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: Node rotateRight(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/temp$10 -> []
<RedBlackBST: Node rotateRight(Node)>/temp$12 -> []
<RedBlackBST: Node rotateRight(Node)>/temp$2 -> []
<RedBlackBST: Node rotateRight(Node)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/temp$4 -> []
<RedBlackBST: Node rotateRight(Node)>/temp$5 -> []
<RedBlackBST: Node rotateRight(Node)>/temp$6 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/temp$7 -> []
<RedBlackBST: Node rotateRight(Node)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: Node rotateRight(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean check()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean check()>/temp$0 -> []
<RedBlackBST: boolean check()>/temp$1 -> []
<RedBlackBST: boolean check()>/temp$2 -> []
<RedBlackBST: boolean check()>/temp$3 -> []
<RedBlackBST: boolean check()>/temp$4 -> []
<RedBlackBST: boolean contains(int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean contains(int)>/key -> []
<RedBlackBST: boolean contains(int)>/temp$0 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: boolean contains(int)>/temp$1 -> []
<RedBlackBST: boolean is23()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean is23()>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean is23()>/temp$1 -> []
<RedBlackBST: boolean is23(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean is23(Node)>/temp$0 -> []
<RedBlackBST: boolean is23(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean is23(Node)>/temp$10 -> []
<RedBlackBST: boolean is23(Node)>/temp$11 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean is23(Node)>/temp$12 -> []
<RedBlackBST: boolean is23(Node)>/temp$13 -> []
<RedBlackBST: boolean is23(Node)>/temp$2 -> []
<RedBlackBST: boolean is23(Node)>/temp$3 -> []
<RedBlackBST: boolean is23(Node)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean is23(Node)>/temp$5 -> []
<RedBlackBST: boolean is23(Node)>/temp$6 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean is23(Node)>/temp$7 -> []
<RedBlackBST: boolean is23(Node)>/temp$8 -> []
<RedBlackBST: boolean is23(Node)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean is23(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBST()>/%intconst0 -> []
<RedBlackBST: boolean isBST()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isBST()>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBST()>/temp$1 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isBST(Node,int,int)>/max -> []
<RedBlackBST: boolean isBST(Node,int,int)>/min -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$0 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$1 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$10 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBST(Node,int,int)>/temp$11 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$12 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$13 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$3 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$4 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$6 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBST(Node,int,int)>/temp$8 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/temp$9 -> []
<RedBlackBST: boolean isBST(Node,int,int)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBalanced()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isBalanced()>/black -> []
<RedBlackBST: boolean isBalanced()>/temp$0 -> []
<RedBlackBST: boolean isBalanced()>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBalanced()>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBalanced()>/temp$5 -> []
<RedBlackBST: boolean isBalanced()>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBalanced(Node,int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isBalanced(Node,int)>/black -> []
<RedBlackBST: boolean isBalanced(Node,int)>/temp$0 -> []
<RedBlackBST: boolean isBalanced(Node,int)>/temp$1 -> []
<RedBlackBST: boolean isBalanced(Node,int)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBalanced(Node,int)>/temp$5 -> []
<RedBlackBST: boolean isBalanced(Node,int)>/temp$6 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isBalanced(Node,int)>/temp$7 -> []
<RedBlackBST: boolean isBalanced(Node,int)>/temp$8 -> []
<RedBlackBST: boolean isBalanced(Node,int)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isEmpty()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isEmpty()>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isEmpty()>/temp$1 -> []
<RedBlackBST: boolean isRed(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isRed(Node)>/temp$0 -> []
<RedBlackBST: boolean isRed(Node)>/temp$1 -> []
<RedBlackBST: boolean isRed(Node)>/temp$2 -> []
<RedBlackBST: boolean isRed(Node)>/temp$3 -> []
<RedBlackBST: boolean isRed(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isSizeConsistent()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isSizeConsistent()>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isSizeConsistent()>/temp$1 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$0 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$10 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$11 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$12 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$13 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$14 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$2 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$5 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$7 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/temp$9 -> []
<RedBlackBST: boolean isSizeConsistent(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: int size(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: int size(Node)>/temp$0 -> []
<RedBlackBST: int size(Node)>/temp$1 -> []
<RedBlackBST: int size(Node)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: java.lang.Object get(Node,int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: java.lang.Object get(Node,int)>/key -> []
<RedBlackBST: java.lang.Object get(Node,int)>/temp$0 -> []
<RedBlackBST: java.lang.Object get(Node,int)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: java.lang.Object get(Node,int)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: java.lang.Object get(Node,int)>/temp$4 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: java.lang.Object get(Node,int)>/temp$5 -> []
<RedBlackBST: java.lang.Object get(Node,int)>/x -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: java.lang.Object get(int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: java.lang.Object get(int)>/key -> []
<RedBlackBST: java.lang.Object get(int)>/temp$0 -> []
<RedBlackBST: java.lang.Object get(int)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: java.lang.Object get(int)>/temp$2 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: void <init>()>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: void delete(int)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: void delete(int)>/key -> []
<RedBlackBST: void delete(int)>/temp$0 -> []
<RedBlackBST: void delete(int)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$10 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$11 -> []
<RedBlackBST: void delete(int)>/temp$12 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$13 -> []
<RedBlackBST: void delete(int)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$3 -> []
<RedBlackBST: void delete(int)>/temp$4 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$5 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$6 -> []
<RedBlackBST: void delete(int)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void delete(int)>/temp$8 -> []
<RedBlackBST: void delete(int)>/temp$9 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void flipColors(Node)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: void flipColors(Node)>/h -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void flipColors(Node)>/temp$0 -> []
<RedBlackBST: void flipColors(Node)>/temp$1 -> []
<RedBlackBST: void flipColors(Node)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void flipColors(Node)>/temp$3 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void flipColors(Node)>/temp$4 -> []
<RedBlackBST: void flipColors(Node)>/temp$5 -> []
<RedBlackBST: void flipColors(Node)>/temp$6 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void flipColors(Node)>/temp$7 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void flipColors(Node)>/temp$8 -> []
<RedBlackBST: void flipColors(Node)>/temp$9 -> []
<RedBlackBST: void main(java.lang.String[])>/%intconst0 -> []
<RedBlackBST: void main(java.lang.String[])>/%intconst1 -> []
<RedBlackBST: void main(java.lang.String[])>/%intconst2 -> []
<RedBlackBST: void main(java.lang.String[])>/st -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: void main(java.lang.String[])>/temp$0 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: void main(java.lang.String[])>/temp$1 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}]
<RedBlackBST: void main(java.lang.String[])>/temp$2 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: void main(java.lang.String[])>/temp$3 -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: void main(java.lang.String[])>/temp$4 -> []
<RedBlackBST: void main(java.lang.String[])>/val -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<RedBlackBST: void put(int,java.lang.Object)>/%this -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}]
<RedBlackBST: void put(int,java.lang.Object)>/key -> []
<RedBlackBST: void put(int,java.lang.Object)>/temp$0 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void put(int,java.lang.Object)>/temp$1 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void put(int,java.lang.Object)>/temp$2 -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
<RedBlackBST: void put(int,java.lang.Object)>/temp$3 -> []
<RedBlackBST: void put(int,java.lang.Object)>/val -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
<java.lang.Object: void <init>()>/%this -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}, NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}, NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]

Points-to sets of all static fields
<RedBlackBST: boolean RED> -> []

Points-to sets of all instance fields
NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.color -> []
NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.key -> []
NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.left -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.right -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]
NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.size -> []
NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}.val -> [NewObj{<RedBlackBST: void main(java.lang.String[])>[3@L413] new java.lang.Object}, NewObj{<RedBlackBST: void main(java.lang.String[])>[7@L414] new java.lang.Object}]
NewObj{<RedBlackBST: void main(java.lang.String[])>[0@L412] new RedBlackBST}.root -> [NewObj{<RedBlackBST: Node put(Node,int,java.lang.Object)>[3@L78] new Node}]

Points-to sets of all array indexes

