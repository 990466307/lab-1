Points-to sets of all variables
[]:<Args$A: void <init>()>/%this -> [[]:NewObj{<Args: void actualNoRecv()>:1(@L52)/new Args$A}, []:NewObj{<Args: void actualRecv()>:1(@L47)/new Args$A}, []:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}, []:NewObj{<Args: void captureRecv()>:0(@L21)/new Args$A}, []:NewObj{<Args: void captureWithActualNoRecv()>:3(@L70)/new Args$A}]
[]:<Args$A: void noArg()>/%this -> [[]:NewObj{<Args: void captureRecv()>:0(@L21)/new Args$A}]
[]:<Args$A: void oneArg(B)>/%this -> [[]:NewObj{<Args: void actualRecv()>:1(@L47)/new Args$A}]
[]:<Args$A: void oneArg(B)>/r1 -> [[]:NewObj{<Args: void actualRecv()>:3(@L47)/new B}]
[]:<Args$A: void threeArgs(B,java.lang.Object,Args$A)>/%this -> [[]:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}]
[]:<Args$A: void threeArgs(B,java.lang.Object,Args$A)>/r1 -> [[]:NewObj{<Args: void captureNoRecv()>:0(@L38)/new B}]
[]:<Args$A: void threeArgs(B,java.lang.Object,Args$A)>/r2 -> [[]:NewObj{<Args: void captureNoRecv()>:3(@L39)/new java.lang.Object}]
[]:<Args$A: void threeArgs(B,java.lang.Object,Args$A)>/r3 -> [[]:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}]
[]:<Args$A: void twoArgs(B,java.lang.Object)>/%this -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:3(@L70)/new Args$A}]
[]:<Args$A: void twoArgs(B,java.lang.Object)>/r1 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:0(@L69)/new B}]
[]:<Args$A: void twoArgs(B,java.lang.Object)>/r2 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:7(@L72)/new java.lang.Object}]
[]:<Args: void <init>()>/%this -> [[]:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}, []:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}]
[]:<Args: void actualNoRecv()>/$r1 -> [[]:NewObj{<Args: void actualNoRecv()>:1(@L52)/new Args$A}]
[]:<Args: void actualNoRecv()>/$r2 -> [[]:NewObj{<Args: void actualNoRecv()>:3(@L52)/new java.lang.Object}]
[]:<Args: void actualNoRecv()>/r0 -> [[]:LambdaObj{alloc=r0 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.BiConsumer ()>[MethodType: void (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeStatic]: <Args: void lambda$actualNoRecv$2(Args$A,java.lang.Object)>,MethodType: void (Args$A,java.lang.Object)]()@<Args: void actualNoRecv()>:0(@L51),type=java.util.function.BiConsumer in <Args: void actualNoRecv()>}]
[]:<Args: void actualRecv()>/$r1 -> [[]:NewObj{<Args: void actualRecv()>:1(@L47)/new Args$A}]
[]:<Args: void actualRecv()>/$r2 -> [[]:NewObj{<Args: void actualRecv()>:3(@L47)/new B}]
[]:<Args: void actualRecv()>/r0 -> [[]:LambdaObj{alloc=r0 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.BiConsumer ()>[MethodType: void (java.lang.Object,java.lang.Object),MethodHandle[REF_invokeVirtual]: <Args$A: void oneArg(B)>,MethodType: void (Args$A,B)]()@<Args: void actualRecv()>:0(@L46),type=java.util.function.BiConsumer in <Args: void actualRecv()>}]
[]:<Args: void callOnThis(B)>/%this -> [[]:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}]
[]:<Args: void callOnThis(B)>/r1 -> [[]:NewObj{<Args: void captureRecv()>:9(@L27)/new B}]
[]:<Args: void callOnThis(B)>/r2 -> [[]:LambdaObj{alloc=r2 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "run" <MethodType: java.lang.Runnable (Args,B)>[MethodType: void (),MethodHandle[REF_invokeSpecial]: <Args: void lambda$callOnThis$0(B)>,MethodType: void ()](%this,r1)@<Args: void callOnThis(B)>:0(@L31),type=java.lang.Runnable in <Args: void callOnThis(B)>}]
[]:<Args: void callOnThis2(B)>/$r3 -> [[]:NewObj{<Args: void callOnThis2(B)>:1(@L63)/new B}]
[]:<Args: void callOnThis2(B)>/%this -> [[]:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}]
[]:<Args: void callOnThis2(B)>/r1 -> [[]:NewObj{<Args: void captureWithActualRecv()>:3(@L57)/new B}]
[]:<Args: void callOnThis2(B)>/r2 -> [[]:LambdaObj{alloc=r2 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer (Args,B)>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeSpecial]: <Args: void lambda$callOnThis2$3(B,B)>,MethodType: void (B)](%this,r1)@<Args: void callOnThis2(B)>:0(@L62),type=java.util.function.Consumer in <Args: void callOnThis2(B)>}]
[]:<Args: void captureNoRecv()>/$r0 -> [[]:NewObj{<Args: void captureNoRecv()>:0(@L38)/new B}]
[]:<Args: void captureNoRecv()>/$r2 -> [[]:NewObj{<Args: void captureNoRecv()>:3(@L39)/new java.lang.Object}]
[]:<Args: void captureNoRecv()>/$r4 -> [[]:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}]
[]:<Args: void captureNoRecv()>/r1 -> [[]:NewObj{<Args: void captureNoRecv()>:0(@L38)/new B}]
[]:<Args: void captureNoRecv()>/r3 -> [[]:NewObj{<Args: void captureNoRecv()>:3(@L39)/new java.lang.Object}]
[]:<Args: void captureNoRecv()>/r5 -> [[]:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}]
[]:<Args: void captureNoRecv()>/r6 -> [[]:LambdaObj{alloc=r6 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "run" <MethodType: java.lang.Runnable (Args$A,B,java.lang.Object)>[MethodType: void (),MethodHandle[REF_invokeStatic]: <Args: void lambda$captureNoRecv$1(Args$A,B,java.lang.Object)>,MethodType: void ()](r5,r1,r3)@<Args: void captureNoRecv()>:9(@L41),type=java.lang.Runnable in <Args: void captureNoRecv()>}]
[]:<Args: void captureRecv()>/$r0 -> [[]:NewObj{<Args: void captureRecv()>:0(@L21)/new Args$A}]
[]:<Args: void captureRecv()>/$r4 -> [[]:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}]
[]:<Args: void captureRecv()>/$r6 -> [[]:NewObj{<Args: void captureRecv()>:9(@L27)/new B}]
[]:<Args: void captureRecv()>/r1 -> [[]:NewObj{<Args: void captureRecv()>:0(@L21)/new Args$A}]
[]:<Args: void captureRecv()>/r3 -> [[]:LambdaObj{alloc=r3 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "run" <MethodType: java.lang.Runnable (Args$A)>[MethodType: void (),MethodHandle[REF_invokeVirtual]: <Args$A: void noArg()>,MethodType: void ()](r1)@<Args: void captureRecv()>:4(@L22),type=java.lang.Runnable in <Args: void captureRecv()>}]
[]:<Args: void captureRecv()>/r5 -> [[]:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}]
[]:<Args: void captureWithActualNoRecv()>/$r0 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:0(@L69)/new B}]
[]:<Args: void captureWithActualNoRecv()>/$r2 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:3(@L70)/new Args$A}]
[]:<Args: void captureWithActualNoRecv()>/$r5 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:7(@L72)/new java.lang.Object}]
[]:<Args: void captureWithActualNoRecv()>/r1 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:0(@L69)/new B}]
[]:<Args: void captureWithActualNoRecv()>/r3 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:3(@L70)/new Args$A}]
[]:<Args: void captureWithActualNoRecv()>/r4 -> [[]:LambdaObj{alloc=r4 = invokedynamic <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)> "accept" <MethodType: java.util.function.Consumer (Args$A,B)>[MethodType: void (java.lang.Object),MethodHandle[REF_invokeStatic]: <Args: void lambda$captureWithActualNoRecv$4(Args$A,B,java.lang.Object)>,MethodType: void (java.lang.Object)](r3,r1)@<Args: void captureWithActualNoRecv()>:6(@L71),type=java.util.function.Consumer in <Args: void captureWithActualNoRecv()>}]
[]:<Args: void captureWithActualRecv()>/$r0 -> [[]:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}]
[]:<Args: void captureWithActualRecv()>/$r2 -> [[]:NewObj{<Args: void captureWithActualRecv()>:3(@L57)/new B}]
[]:<Args: void captureWithActualRecv()>/r1 -> [[]:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}]
[]:<Args: void consume(B)>/%this -> [[]:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}]
[]:<Args: void consume(B)>/r1 -> [[]:NewObj{<Args: void captureRecv()>:9(@L27)/new B}]
[]:<Args: void consume2(B,B)>/%this -> [[]:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}]
[]:<Args: void consume2(B,B)>/r1 -> [[]:NewObj{<Args: void captureWithActualRecv()>:3(@L57)/new B}]
[]:<Args: void consume2(B,B)>/r2 -> [[]:NewObj{<Args: void callOnThis2(B)>:1(@L63)/new B}]
[]:<Args: void lambda$actualNoRecv$2(Args$A,java.lang.Object)>/r0 -> [[]:NewObj{<Args: void actualNoRecv()>:1(@L52)/new Args$A}]
[]:<Args: void lambda$actualNoRecv$2(Args$A,java.lang.Object)>/r1 -> [[]:NewObj{<Args: void actualNoRecv()>:3(@L52)/new java.lang.Object}]
[]:<Args: void lambda$callOnThis$0(B)>/%this -> [[]:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}]
[]:<Args: void lambda$callOnThis$0(B)>/r1 -> [[]:NewObj{<Args: void captureRecv()>:9(@L27)/new B}]
[]:<Args: void lambda$callOnThis2$3(B,B)>/%this -> [[]:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}]
[]:<Args: void lambda$callOnThis2$3(B,B)>/r1 -> [[]:NewObj{<Args: void captureWithActualRecv()>:3(@L57)/new B}]
[]:<Args: void lambda$callOnThis2$3(B,B)>/r2 -> [[]:NewObj{<Args: void callOnThis2(B)>:1(@L63)/new B}]
[]:<Args: void lambda$captureNoRecv$1(Args$A,B,java.lang.Object)>/r0 -> [[]:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}]
[]:<Args: void lambda$captureNoRecv$1(Args$A,B,java.lang.Object)>/r1 -> [[]:NewObj{<Args: void captureNoRecv()>:0(@L38)/new B}]
[]:<Args: void lambda$captureNoRecv$1(Args$A,B,java.lang.Object)>/r2 -> [[]:NewObj{<Args: void captureNoRecv()>:3(@L39)/new java.lang.Object}]
[]:<Args: void lambda$captureWithActualNoRecv$4(Args$A,B,java.lang.Object)>/r0 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:3(@L70)/new Args$A}]
[]:<Args: void lambda$captureWithActualNoRecv$4(Args$A,B,java.lang.Object)>/r1 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:0(@L69)/new B}]
[]:<Args: void lambda$captureWithActualNoRecv$4(Args$A,B,java.lang.Object)>/r2 -> [[]:NewObj{<Args: void captureWithActualNoRecv()>:7(@L72)/new java.lang.Object}]
[]:<Args: void main(java.lang.String[])>/r0 -> [[]:EnvObj{alloc=<main-arguments>,type=java.lang.String[] in <Args: void main(java.lang.String[])>}]
[]:<B: void <init>()>/%this -> [[]:NewObj{<Args: void actualRecv()>:3(@L47)/new B}, []:NewObj{<Args: void callOnThis2(B)>:1(@L63)/new B}, []:NewObj{<Args: void captureNoRecv()>:0(@L38)/new B}, []:NewObj{<Args: void captureRecv()>:9(@L27)/new B}, []:NewObj{<Args: void captureWithActualNoRecv()>:0(@L69)/new B}, []:NewObj{<Args: void captureWithActualRecv()>:3(@L57)/new B}]
[]:<java.lang.Object: int hashCode()>/%native-this -> [[]:NewObj{<Args: void actualNoRecv()>:1(@L52)/new Args$A}, []:NewObj{<Args: void actualNoRecv()>:3(@L52)/new java.lang.Object}]
[]:<java.lang.Object: java.lang.Class getClass()>/%native-this -> [[]:NewObj{<Args: void captureRecv()>:0(@L21)/new Args$A}]
[]:<java.lang.Object: void <init>()>/%this -> [[]:NewObj{<Args: void actualNoRecv()>:1(@L52)/new Args$A}, []:NewObj{<Args: void actualNoRecv()>:3(@L52)/new java.lang.Object}, []:NewObj{<Args: void actualRecv()>:1(@L47)/new Args$A}, []:NewObj{<Args: void actualRecv()>:3(@L47)/new B}, []:NewObj{<Args: void callOnThis2(B)>:1(@L63)/new B}, []:NewObj{<Args: void captureNoRecv()>:0(@L38)/new B}, []:NewObj{<Args: void captureNoRecv()>:3(@L39)/new java.lang.Object}, []:NewObj{<Args: void captureNoRecv()>:6(@L40)/new Args$A}, []:NewObj{<Args: void captureRecv()>:0(@L21)/new Args$A}, []:NewObj{<Args: void captureRecv()>:6(@L26)/new Args}, []:NewObj{<Args: void captureRecv()>:9(@L27)/new B}, []:NewObj{<Args: void captureWithActualNoRecv()>:0(@L69)/new B}, []:NewObj{<Args: void captureWithActualNoRecv()>:3(@L70)/new Args$A}, []:NewObj{<Args: void captureWithActualNoRecv()>:7(@L72)/new java.lang.Object}, []:NewObj{<Args: void captureWithActualRecv()>:0(@L56)/new Args}, []:NewObj{<Args: void captureWithActualRecv()>:3(@L57)/new B}]
[]:<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>/r1 -> [[]:MethodHandlesLookupObj{alloc=Args,type=java.lang.invoke.MethodHandles$Lookup}]
[]:<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>/r2 -> [[]:ConstantObj{java.lang.invoke.MethodType: MethodType: java.lang.Runnable (Args$A)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: java.lang.Runnable (Args$A,B,java.lang.Object)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: java.lang.Runnable (Args,B)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: java.util.function.BiConsumer ()}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: java.util.function.Consumer (Args$A,B)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: java.util.function.Consumer (Args,B)}]
[]:<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>/r3 -> [[]:ConstantObj{java.lang.String: "accept"}, []:ConstantObj{java.lang.String: "run"}]
[]:<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>/r4 -> [[]:ConstantObj{java.lang.invoke.MethodType: MethodType: void ()}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: void (java.lang.Object)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: void (java.lang.Object,java.lang.Object)}]
[]:<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>/r5 -> [[]:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeSpecial]: <Args: void lambda$callOnThis$0(B)>}, []:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeSpecial]: <Args: void lambda$callOnThis2$3(B,B)>}, []:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeStatic]: <Args: void lambda$actualNoRecv$2(Args$A,java.lang.Object)>}, []:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeStatic]: <Args: void lambda$captureNoRecv$1(Args$A,B,java.lang.Object)>}, []:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeStatic]: <Args: void lambda$captureWithActualNoRecv$4(Args$A,B,java.lang.Object)>}, []:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeVirtual]: <Args$A: void noArg()>}, []:ConstantObj{java.lang.invoke.MethodHandle: MethodHandle[REF_invokeVirtual]: <Args$A: void oneArg(B)>}]
[]:<java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>/r6 -> [[]:ConstantObj{java.lang.invoke.MethodType: MethodType: void ()}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: void (Args$A,B)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: void (Args$A,java.lang.Object)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: void (B)}, []:ConstantObj{java.lang.invoke.MethodType: MethodType: void (java.lang.Object)}]

Points-to sets of all instance fields

Points-to sets of all array indexes
[]:EnvObj{alloc=<main-arguments>,type=java.lang.String[] in <Args: void main(java.lang.String[])>}[*] -> [[]:EnvObj{alloc=<main-arguments-element>,type=java.lang.String in <Args: void main(java.lang.String[])>}]

Points-to sets of all static fields

